package util;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

public class PuzzleBoxUtils {
	/**<h1> Generate Tiles</h1>
	 * Generates a char array of tiles containing the chars 
	 * 1,2,3,4,5,6,7,8,* in a random order
	 * <p>
	 * @return tiles          : char[] containing tiles 
	 * @postcondition         : An array of 9 char has been returned
	 * */
	public static char[] genTiles() {
		
		//four valid random tile sets
		char[] r1 = {'1','2','3','7','8','4','6','*','5'};
		char[] r2 = {'*','2','3','1','8','4','7','6','5'};
		char[] r3 = {'1','2','3','8','6','*','7','5','4'};
		char[] r4 = {'1','2','3','8','6','4','7','5','*'};
		
		//random number
		Random r = new Random();
		
		//randomly choose and return
		if( (r.nextInt((4 - 1) + 1) + 1)== 1 ) {
			return r1;
		}else if( (r.nextInt((4 - 1) + 1) + 1)== 2 ) {
			return r2;
		}else if( (r.nextInt((4 - 1) + 1) + 1)== 3 ) {
			return r3;
		}else  {
			return r4;
		}

	}
	
	/**<h1> h(n) Distance from goal state</h1>
	 * Will determine distance from goal state by counting how manny tiles
	 * are different from goal state. This will server as h(n) in the A* 
	 * formula f(n)=(g)+h(n)
	 * <p>
	 * @param current tiles     : tiles to be compared to goal state
	 * @return distance			: int distance from goal state
	 * @postcondition			: an int reprasenting distance from goal 
	 * state is returned
	 * */
	public static int distanceToGoal(char[] tiles) {
		int d=0;
		char[] goal = {'1','2','3','8','*','4','7','6','5'};
		for(int i =0; i <tiles.length;i++) {
			if(tiles[i] != goal[i]) {
				d++;
			}
		}
		return d;
	}
	
	/**<h1> h(n) Distance from start </h1>
	 * Will determine distance from starting state by counting how manny tiles
	 * are different from starting  state. This will server as g(n) in the A* 
	 * formula f(n)=(g)+h(n)
	 * <p>
	 * @param starting tiles    : tiles of starting state
	 * @param current tiles     : tiles to be compared to starting state
	 * @return distance			: int distance from goal state
	 * @postcondition			: an int reprasenting distance from goal 
	 * state is returned
	 * */
	public static int distanceFromStart(char[] start, char[] tiles) {
		int d=0;
		
		for(int i =0; i <tiles.length;i++) {
			if(tiles[i]!= start[i]) {
				d++;
			}
		}
		return d;
	}
}
