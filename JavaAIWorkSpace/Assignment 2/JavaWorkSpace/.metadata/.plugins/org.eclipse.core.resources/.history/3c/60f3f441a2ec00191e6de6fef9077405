package eightTile;

public class PuzzleBox {
	//array of char for tiles, kept in order from position 1 to 9 ('*'= blank tile)
	private char[] tiles;
	//array of puzzle boxes for the moves
	PuzzleBox[] moves;
	//distance from goal, value of h(n)
	int hn;
	//distance from start, value of g(n)
	int gn;
	
	/**<h1>No Args Constructor</h1>
	 * <p>
	 * @postioncondition		: an instance of the PuzzleBox class has 
	 * been instantiated with random tiles.
	 * */
	public PuzzleBox() {
		this.tiles = util.PuzzleBoxUtils.genTiles();
		this.hn = util.PuzzleBoxUtils.distanceToGoal(tiles);
		//no args constructor would only be used to create root PuzzleBox so gn=0
		this.gn=0;
	}
	
	/**<h1> Args Constructor</h1>
	 * <p>
	 * @param parentsGn         : gn of parent puzzel box
	 * @param tiles             : char[] of tiles for this puzzle box
	 * @postioncondition		: an instance of the PuzzleBox class has 
	 * been instantiated with given tiles.
	 * */
	public PuzzleBox(char[] tiles, int parentsGn) {
		this.tiles = util.PuzzleBoxUtils.genTiles();
		this.hn = util.PuzzleBoxUtils.distanceToGoal(tiles);
		this.gn = parentsGn+1;
		
	}
	/**<h1> Generate Moves <h1>
	 * Generates child puzzle box nodes based on possible moves, and populates
	 * PuzzleBox[] moves
	 * <p>
	 * @postcondition 			: PuzzleBox[] moves has been populated  
	 * */
	public void genMoves() {
		//index of *
		int sIndex=0;
		for(int i=0; i< tiles.length;i++) 
			if(tiles[i]=='*') 
				sIndex = i;
		//unmodified tile array for child puzzle mox
		char[] childTiles = tiles;
		//populate moves with all possible puzzle boxes based on sIndex
		if(sIndex==0) {//space is in top left corner
			//move space to top middle
			childTiles[0] = tiles[1];
			childTiles[1] = tiles[0];
			moves[0]= new PuzzleBox(childTiles, gn);
			//move space to left middle
			childTiles[0] = tiles[3];
			childTiles[3] = tiles[0];
			moves[0]= new PuzzleBox(childTiles, gn);
		}else if(sIndex==1) {//space is in top middle
			//move space to top left corner
			childTiles[1] = tiles[0];
			childTiles[0] = tiles[1];
			moves[0]= new PuzzleBox(childTiles, gn);
			//move space to middle
			childTiles[1] = tiles[5];
			childTiles[5] = tiles[1];
			moves[0]= new PuzzleBox(childTiles, gn);
			//move space to top right corner
			childTiles[1] = tiles[2];
			childTiles[2] = tiles[1];
			moves[0]= new PuzzleBox(childTiles, gn);
		}else
	}
	/**<h1>Get tiles </h1>
	 * Returns the tiles of this puzzle box
	 * <p>
	 * @return tiles			: char[] tiles 
	 * @postcondition			: tiles have been returned
	 * */
	public char[] getTiles() {
		return this.tiles;
	} 
	

	
}
