package util;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class PuzzleBoxUtils {
	/**<h1> Generate Tiles</h1>
	 * Generates a char array of tiles containing the chars 
	 * 1,2,3,4,5,6,7,8,* in a random order
	 * <p>
	 * @return tiles          : char[] containing tiles 
	 * @postcondition         : An array of 9 char has been returned
	 * */
	public static char[] genTiles() {
		List<Character> temp = new ArrayList<Character>();
		temp.add('1');
		temp.add('2');
		temp.add('3');
		temp.add('4');
		temp.add('5');
		temp.add('6');
		temp.add('7');
		temp.add('8');
		temp.add('*');
		Collections.shuffle(temp);
		char[] tiles = new char[9];
		for(int i = 0; i < tiles.length;i++ ) 
			tiles[i]= temp.get(i);	
		return tiles;
	}
	
	/**<h1> h(n) Distance from goal state</h1>
	 * Will determine distance from goal state by counting how manny tiles
	 * are different from goal state. This will server as h(n) in the A* 
	 * formula f(n)=(g)+h(n)
	 * <p>
	 * @param current tiles     : tiles to be compared to goal state
	 * @return distance			: int distance from goal state
	 * @postcondition			: an int reprasenting distance from goal 
	 * state is returned
	 * */
	public static int distanceToGoal(char[] tiles) {
		int d=0;
		char[] goal = {'1','2','3','8','*','4','7','6','5'};
		for(int i =0; i <tiles.length;i++) {
			if(tiles[i] != goal[i]) {
				d++;
			}
		}
		return d;
	}
	
	/**<h1> h(n) Distance from start </h1>
	 * Will determine distance from starting state by counting how manny tiles
	 * are different from starting  state. This will server as g(n) in the A* 
	 * formula f(n)=(g)+h(n)
	 * <p>
	 * @param starting tiles    : tiles of starting state
	 * @param current tiles     : tiles to be compared to starting state
	 * @return distance			: int distance from goal state
	 * @postcondition			: an int reprasenting distance from goal 
	 * state is returned
	 * */
	public static int distanceFromStart(char[] start, char[] tiles) {
		int d=0;
		
		for(int i =0; i <tiles.length;i++) {
			if(tiles[i]!= start[i]) {
				d++;
			}
		}
		return d;
	}
}
